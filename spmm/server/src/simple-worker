// vim:set ft=cpp:

#pragma once

#include <l4/util/util.h>

#include <cstdio>
#include <cstring>
#include <map>

#include "worker"

namespace Spmm
{

typedef std::map<page_t, page_t> SimpleMap;

class SimpleWorker : public Worker
{
private:
  SimpleMap _stable;
  SimpleMap _unstable;
  l4_uint64_t _count;
  l4_uint64_t _sleep;

  page_t find_match(page_t subject, SimpleMap *map)
  {
    for (SimpleMap::value_type const &v : *map)
    {
      page_t p = v.first;
      if (subject == p)
        continue;
      if (!(memcmp(reinterpret_cast<void const *>(subject),
                   reinterpret_cast<void const *>(p),
                   L4_PAGESIZE)))
      {
        printf("found match: 0x%08lX equals 0x%08lX\n", subject, p);
        return p;
      }
    }
    return 0;
  }

public:
  SimpleWorker(l4_uint64_t c, l4_uint64_t s) : _count(c), _sleep(s) {}

  void run(void) override
  {
    l4_sleep(60000);
    printf("worker run...\n");
    _stable.clear();
    _unstable.clear();

    while(1)
    {
      //pass
      printf("worker scan...\n");
      for (unsigned int i = 0; i < _count; i++)
      {
        page_t next = this->manager->get_next_p(this);
        if (!next)
          break;

        if (i < 65536)
        {
          _unstable.insert({next, 0});
          continue;
        }

        page_t match = find_match(next, &(this->_stable));
        if (match)
          this->manager->merge_imm_p(this, match, next);
        else
        {
          match = find_match(next, &(this->_unstable));
          if (match)
          {
            page_t p = this->manager->merge_vol_p(this, match, next);

            if (!p)
            {
              _unstable.insert({next, 0});
              continue;
            }
            else
            {
              _unstable.erase(match);
            }
          }
          else
            _unstable.insert({next, 0});
        }
      }

      //sleep
      printf("worker sleep...\n");
      l4_sleep(_sleep);
      _unstable.clear();
    }
  }

  void inc_p_refcnt(page_t p) override
  {
    if (_stable.find(p) == _stable.end())
      _stable[p] = 1;
    else
      _stable[p]++;
  }

  void dec_p_refcnt(page_t p) override
  {
    if (!(--_stable[p]))
    {
      _stable.erase(p);
      this->manager->free_imm_p(this, p);
    }
  }
};

} //Spmm
